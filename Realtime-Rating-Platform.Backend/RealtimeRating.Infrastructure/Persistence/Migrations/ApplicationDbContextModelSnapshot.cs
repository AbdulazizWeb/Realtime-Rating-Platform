// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RealtimeRating.Infrastructure.Persistence;

#nullable disable

namespace RealtimeRating.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RealtimeRating.Domain.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.LessonTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StudentRoomId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StudentRoomId");

                    b.ToTable("LessonTasks");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LessonTaskId")
                        .HasColumnType("integer");

                    b.Property<string>("Rate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StudentGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LessonTaskId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.StudentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentGroups");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.StudentInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.StudentRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("StudentRooms");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.TeacherInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "baxtiyorov1999@bk.ru",
                            Fullname = "Abdulaziz Baxtiyorov",
                            PasswordHash = "CA5B9811BE39C13BA3F8265C006761214B85F36FFE177C482AA548A30FC2C8994F5AE33790A4AE6A302B65A05A906AAED4912F02C0E69FC6CE14A9C90AD998A0",
                            Role = 1
                        });
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.Group", b =>
                {
                    b.HasOne("RealtimeRating.Domain.Entities.TeacherInfo", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.LessonTask", b =>
                {
                    b.HasOne("RealtimeRating.Domain.Entities.StudentRoom", "StudentRoom")
                        .WithMany("LessonTasks")
                        .HasForeignKey("StudentRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentRoom");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.Rating", b =>
                {
                    b.HasOne("RealtimeRating.Domain.Entities.LessonTask", "LessonTask")
                        .WithMany("Ratings")
                        .HasForeignKey("LessonTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtimeRating.Domain.Entities.StudentGroup", "StudentGroup")
                        .WithMany("Ratings")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonTask");

                    b.Navigation("StudentGroup");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.Room", b =>
                {
                    b.HasOne("RealtimeRating.Domain.Entities.TeacherInfo", "Teacher")
                        .WithMany("Rooms")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.StudentGroup", b =>
                {
                    b.HasOne("RealtimeRating.Domain.Entities.Group", "Group")
                        .WithMany("GroupStudents")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtimeRating.Domain.Entities.StudentInfo", "Student")
                        .WithMany("StudentGroups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.StudentInfo", b =>
                {
                    b.HasOne("RealtimeRating.Domain.Entities.User", "Student")
                        .WithMany("Students")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.StudentRoom", b =>
                {
                    b.HasOne("RealtimeRating.Domain.Entities.Room", "Room")
                        .WithMany("RoomStudents")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtimeRating.Domain.Entities.StudentGroup", "StudentGroup")
                        .WithMany("StudentRooms")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("StudentGroup");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.TeacherInfo", b =>
                {
                    b.HasOne("RealtimeRating.Domain.Entities.User", "Teacher")
                        .WithMany("Teachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.Group", b =>
                {
                    b.Navigation("GroupStudents");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.LessonTask", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.Room", b =>
                {
                    b.Navigation("RoomStudents");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.StudentGroup", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("StudentRooms");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.StudentInfo", b =>
                {
                    b.Navigation("StudentGroups");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.StudentRoom", b =>
                {
                    b.Navigation("LessonTasks");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.TeacherInfo", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("RealtimeRating.Domain.Entities.User", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
